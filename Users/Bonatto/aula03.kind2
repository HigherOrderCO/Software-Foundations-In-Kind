// 1.0.1
// mult_0_r : (n : Nat) → n * 0 = 0
// mult_0_r n = ?mult_0_r_rhs
Mult_0_r (n: Nat)     : (Equal Nat (Nat.mul n Nat.zero) Nat.zero)
Mult_0_r Nat.zero     = Equal.refl
Mult_0_r (Nat.succ n) = 
  let ind = Mult_0_r n
  let app = Equal.apply (x => (Nat.add x Nat.zero)) ind
  app

// plus_n_Sm : (n, m : Nat) → S (n + m) = n + (S m)
// plus_n_Sm n m = ?plus_n_Sm_rhs
Plus_n_sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
Plus_n_sm Nat.zero m        = Equal.refl
Plus_n_sm (Nat.succ n) m    = 
  let ind = Plus_n_sm n m
  let app = Equal.apply (x => (Nat.succ x)) ind
  app

// plus_comm : (n, m : Nat) → n + m = m + n
// plus_comm n m = ?plus_comm_rhs
Plus_comm (n: Nat) (m: Nat) : (Equal Nat (Nat.add n m) (Nat.add m n))
Plus_comm Nat.zero m        = Equal.mirror (Add_0_r m)
Plus_comm (Nat.succ n) m    =
  let ind = Plus_comm n m
  let app = Equal.apply (x => (Nat.succ x)) ind
  let fim = Equal.chain app (Plus_n_sm m n)
  fim


Add_0_r (n: Nat)      : (Equal Nat (Nat.add n Nat.zero) n)
Add_0_r Nat.zero      = Equal.refl
Add_0_r (Nat.succ n)  = 
  let ind = Add_0_r n
  let app = Equal.apply (x => (Nat.succ x)) ind
  app

// plus_assoc : (n, m, p : Nat) →  n + (m + p) = (n + m) + p
// plus_assoc n m p = ?plus_assoc_rhs
Plus_assoc (n: Nat) (m: Nat) (p: Nat) : (Equal Nat (Nat.add n (Nat.add m p)) (Nat.add (Nat.add n m) p))
Plus_assoc Nat.zero m p               = Equal.refl 
Plus_assoc (Nat.succ n) m p           = 
  let ind = Plus_assoc n m p
  let app = Equal.apply (x => Nat.succ x) ind
  app

// 1.0.2
// double_plus : (n : Nat) → double n = n + n
// double_plus n = ?double_plus_rhs
Double_plus (n: Nat)      : (Equal Nat (Nat.double n) (Nat.add n n))
Double_plus Nat.zero      = Equal.refl
Double_plus (Nat.succ n)  = 
  let ind = Double_plus n
  let app = Equal.apply (x => (Nat.succ x)) ind
  let fim = Equal.chain app (Plus_n_sm n n)
  Equal.apply (x => Nat.succ x) fim

// evenb_S : (n : Nat) → evenb (S n) = not (evenb n)
// evenb_S n = ?evenb_S_rhs
Evenb_s (n: Nat)      : (Equal Bool (Nat.is_even (Nat.succ n)) (Bool.not (Nat.is_even n)))
Evenb_s n  = Equal.refl

// 3.0.1
// plus_swap : (n, m, p : Nat) →  n + (m + p) = m + (n + p)
// plus_swap n m p = ?plus_swap_rhs
Plus_swap (n: Nat) (m: Nat) (p: Nat)  : (Equal Nat (Nat.add n (Nat.add m p)) (Nat.add m (Nat.add n p)))
Plus_swap Nat.zero m p                = Equal.refl
Plus_swap (Nat.succ n) m p            = 
  let ind1  = Plus_swap n m p
  let ind2  = Plus_n_sm m (Nat.add n p)
  let ind3  = Equal.apply (x => (Nat.succ x)) ind1 
  let app   = Equal.chain ind3 ind2
  app

// - app : (Equal Nat (Nat.succ (Nat.add n (Nat.add m p))) (Nat.succ (Nat.add m (Nat.add n p))))
// - Goal: (Equal Nat (Nat.succ (Nat.add n (Nat.add m p))) (Nat.add m (Nat.succ (Nat.add n p))))
// - ind : (Equal Nat           (Nat.add n (Nat.add m p))           (Nat.add m (Nat.add n p)))

// mult_comm : (m, n : Nat) → m * n = n * m
// mult_comm m n = ?mult_comm_rhs
Mult_comm (n: Nat) (m: Nat) : (Equal Nat (Nat.mul m n) (Nat.mul n m))
Mult_comm Nat.zero m        = Mult_0_r m
Mult_comm (Nat.succ n)  m   = 
  let ind   = Mult_comm n m
  let ind1  = Equal.apply (x => (Nat.add x m)) ind
  ?

// - Goal:  (Equal Nat (Nat.mul m (Nat.succ n))   (Nat.add (Nat.mul n m) m))
// - ind1 : (Equal Nat (Nat.add (Nat.mul m n) m)  (Nat.add (Nat.mul n m) m))

// 3.0.2
// lte_refl : (n : Nat) → True = lte n n
// lte_refl n = ?lte_refl_rhs
Lte_refl (n: Nat)     : (Equal Bool Bool.true (Nat.lte n n))
Lte_refl  Nat.zero    = Equal.refl
Lte_refl (Nat.succ n) = 
  let ind = Lte_refl n
  ind

// zero_nbeq_S : (n : Nat) → 0 == (S n) = False
// zero_nbeq_S n = ?zero_nbeq_S_rhs

// andb_false_r : (b : Bool) → b && False = False
// andb_false_r b = ?andb_false_r_rhs

// plus_ble_compat_l : (n, m, p : Nat) →
// lte n m = True → lte (p + n) (p + m) = True
// plus_ble_compat_l n m p prf = ?plus_ble_compat_l_rhs

// S_nbeq_0 : (n : Nat) → (S n) == 0 = False
// S_nbeq_0 n = ?S_nbeq_0_rhs

// mult_1_l : (n : Nat) → 1 * n = n
// mult_1_l n = ?mult_1_l_rhs

// all3_spec : (b, c : Bool) →
// (b && c) || ((not b) || (not c)) = True
// all3_spec b c = ?all3_spec_rhs

// mult_plus_distr_r : (n, m, p : Nat) → (n + m) * p = (n * p) + (m * p)
// mult_plus_distr_r n m p = ?mult_plus_distr_r_rhs

// mult_assoc : (n, m, p : Nat) → n * (m * p) = (n * m) * p
// mult_assoc n m p = ?mult_assoc_rhs











