// 1.1. Exercise: 1 star (snd_fst_is_swap).
// snd_fst_is_swap : (p : NatProd) → (snd p, fst p) = swap_pair p
// snd_fst_is_swap p = ?snd_fst_is_swap_rhs
Snd_fst_is_swap (p: Pair Nat Nat ) : (Equal (Pair Nat Nat) (Pair.swap Nat Nat (Pair.swap Nat Nat p)) p)

// 1.2. Exercise: 1 star, optional (fst_swap_is_snd).
// fst_swap_is_snd : (p : NatProd) → fst (swap_pair p) = snd p
// fst_swap_is_snd p = ?fst_swap_is_snd_rhs
Fst_swap_is_snd (p: Pair Nat Nat) (a: Nat) (b: Nat) : (Equal (Pair Nat Nat) (Pair.swap Nat Nat (Pair.new a b) ) (Pair.new b a))

// 2.5.1. Exercise: 2 stars, recommended (list_funs). Complete the definitions of
// nonzeros, oddmembers and countoddmembers below. Have a look at the tests to understand
// what these functions should do.
//
// nonzeros : (l : NatList) → NatList
// nonzeros l = ?nonzeros_rhs
//
// test_nonzeros : nonzeros [0,1,0,2,3,0,0] = [1,2,3]
// test_nonzeros = ?test_nonzeros_rhs
Test_nonzeros (xs: List Nat) (ys: List Nat) : (Equal (List Nat) (List.delete_el Nat.is_zero xs) )

// oddmembers : (l : NatList) → NatList
// oddmembers l = ?oddmembers_rhs
//
// test_oddmembers : oddmembers [0,1,0,2,3,0,0] = [1,3]
// test_oddmembers = ?test_oddmembers_rhs
//
// countoddmembers : (l : NatList) → Nat
// countoddmembers l = ?countoddmembers_rhs
//
// test_countoddmembers1 : countoddmembers [1,0,3,1,4,5] = 4
// test_countoddmembers1 = ?test_countoddmembers1_rhs

// 2.5.2
// alternate : (l1, l2 : NatList) → NatList
// alternate l1 l2 = ?alternate_rhs

// test_alternate1 : alternate [1,2,3] [4,5,6] = [1,4,2,5,3,6]
// test_alternate1 = ?test_alternate1_rhs

// test_alternate2 : alternate [1] [4,5,6] = [1,4,5,6]
// test_alternate2 = ?test_alternate2_rhs

// test_alternate3 : alternate [1,2,3] [4] = [1,4,2,3]
// test_alternate3 = ?test_alternate3_rhs

// test_alternate4 : alternate [] [20,30] = [20,30]
// test_alternate4 = ?test_alternate4_rhs


// 2.6.1
Bag : Type
Bag = (List Nat)
// TODO: BAG É UMA LISTA DE NAT
// count : (v : Nat) → (s : Bag) → Nat
// count v s = ?count_rhs

// All these proofs can be done just by Refl.

// test_count1 : count 1 [1,2,3,1,4,1] = 3
// test_count1 = ?test_count1_rhs

// test_count2 : count 6 [1,2,3,1,4,1] = 0
// test_count2 = ?test_count2_rhs

// sum : Bag → Bag → Bag
// sum x y = ?sum_rhs

// test_sum1 : count 1 (sum [1,2,3] [1,4,1]) = 3
// test_sum1 = ?test_sum1_rhs

// add : (v : Nat) → (s : Bag) → Bag
// add v s = ?add_rhs

// test_add1 : count 1 (add 1 [1,4,1]) = 3
// test_add1 = ?test_add1_rhs

// test_add2 : count 5 (add 1 [1,4,1]) = 0
// test_add2 = ?test_add2_rhs

// member : (v : Nat) → (s : Bag) → Bool
// member v s = ?member_rhs

// test_member1 : member 1 [1,4,1] = True
// test_member1 = ?test_member1_rhs

// test_member2 : member 2 [1,4,1] = False
// test_member2 = ?test_member2_rhs

// 2.6.2
// remove_one : (v : Nat) → (s : Bag) → Bag
// remove_one v s = ?remove_one_rhs

// test_remove_one1 : count 5 (remove_one 5 [2,1,5,4,1]) = 0
// test_remove_one1 = ?test_remove_one1_rhs

// test_remove_one2 : count 5 (remove_one 5 [2,1,4,1]) = 0
// test_remove_one2 = ?test_remove_one2_rhs

// test_remove_one3 : count 4 (remove_one 5 [2,1,5,4,1,4]) = 2
// test_remove_one3 = ?test_remove_one3_rhs

// test_remove_one4 : count 5 (remove_one 5 [2,1,5,4,5,1,4]) = 1
// test_remove_one4 = ?test_remove_one4_rhs

// remove_all : (v : Nat) → (s : Bag) → Bag
// remove_all v s = ?remove_all_rhs

// test_remove_all1 : count 5 (remove_all 5 [2,1,5,4,1]) = 0
// test_remove_all1 = ?test_remove_all1_rhs

// test_remove_all2 : count 5 (remove_all 5 [2,1,4,1]) = 0
// test_remove_all2 = ?test_remove_all2_rhs

// test_remove_all3 : count 4 (remove_all 5 [2,1,5,4,1,4]) = 2
// test_remove_all3 = ?test_remove_all3_rhs

// test_remove_all4 : count 5 (remove_all 5 [2,1,5,4,5,1,4,5,1,4]) = 0
// test_remove_all4 = ?test_remove_all4_rhs

// subset : (s1 : Bag) → (s2 : Bag) → Bool
// subset s1 s2 = ?subset_rhs

// test_subset1 : subset [1,2] [2,1,4,1] = True
// test_subset1 = ?test_subset1_rhs

// test_subset2 : subset [1,2,2] [2,1,4,1] = False
// test_subset2 = ?test_subset2_rhs

// 3.3.1
// app_nil_r : (l : NatList) → (l ++ []) = l
// app_nil_r l = ?app_nil_r_rhs

// rev_app_distr : (l1, l2 : NatList) → rev (l1 ++ l2) = (rev l2) ++ (rev l1)
// rev_app_distr l1 l2 = ?rev_app_distr_rhs

// rev_involutive : (l : NatList) → rev (rev l) = l
// rev_involutive l = ?rev_involutive_rhs

// app_assoc4 : (l1, l2, l3, l4 : NatList) → (l1 ++ (l2 ++ (l3 ++ l4))) = ((l1 ++ l2) ++ l3) ++ l4
// app_assoc4 l1 l2 l3 l4 = ?app_assoc4_rhs

// nonzeros_app : (l1, l2 : NatList) → nonzeros (l1 ++ l2) = (nonzeros l1) ++ (nonzeros l2)
// nonzeros_app l1 l2 = ?nonzeros_app_rhs

// 3.3.2
// beq_NatList : (l1, l2 : NatList) → Bool
// beq_NatList l1 l2 = ?beq_NatList_rhs

// test_beq_NatList1 : beq_NatList Nil Nil = True
// test_beq_NatList1 = ?test_beq_NatList1_rhs

// test_beq_NatList2 : beq_NatList [1,2,3] [1,2,3] = True
// test_beq_NatList2 = ?test_beq_NatList2_rhs

// test_beq_NatList3 : beq_NatList [1,2,3] [1,2,4] = False
// test_beq_NatList3 = ?test_beq_NatList3_rhs

// beq_NatList_refl : (l : NatList) → True = beq_NatList l l
// beq_NatList_refl l = ?beq_NatList_refl_rhs

// 3.4.1
// count_member_nonzero : (s : Bag) → lte 1 (count 1 (1 :: s)) = True
// count_member_nonzero s = ?count_member_nonzero_rhs

// 3.4.3
// rev_injective : (l1, l2 : NatList) → rev l1 = rev l2 → l1 = l2
// rev_injective l1 l2 prf = ?rev_injective_rhs

// 4.0.1
// hd_error : (l : NatList) → NatOption
// hd_error l = ?hd_error_rhs

// test_hd_error1 : hd_error [] = None
// test_hd_error1 = ?test_hd_error1_rhs

// test_hd_error2 : hd_error [1] = Some 1
// test_hd_error2 = ?test_hd_error2_rhs

// test_hd_error3 : hd_error [5,6] = Some 5
// test_hd_error3 = ?test_hd_error3_rhs

// 5.0.1
// beq_id_refl : (x : Id) → True = beq_id x x
// beq_id_refl x = ?beq_id_refl_rhs

// 5.0.2
// update_eq : (d : PartialMap) → (x : Id) → (v : Nat) → find x (update d x v) = Some v
// update_eq d x v = ?update_eq_rhs

// 5.0.3
// update_neq : (d : PartialMap) → (x, y : Id) → (o : Nat) → beq_id x y = False → find x (update d y o) = find x d
// update_neq d x y o prf = ?update_neq_rhs


