
NatProd : Type
NatProd.new (fst: Nat) (snd: Nat) : (NatProd)
// NatProd = (Pair Nat Nat)

Fst (p: NatProd) : Nat
Fst (NatProd.new fst snd) = fst

Snd (p: NatProd) : Nat
Snd (NatProd.new fst snd) = snd

Swap_pair (p: NatProd) : NatProd
Swap_pair (NatProd.new fst snd) = (NatProd.new snd fst)

Snd_fst_is_swap (p: NatProd) : (Equal NatProd (NatProd.new (Snd p) (Fst p)) (Swap_pair p))
Snd_fst_is_swap (NatProd.new x y) = Equal.refl

Fst_swap_is_snd (p: NatProd) : (Equal Nat (Fst (Swap_pair p)) (Snd p))
Fst_swap_is_snd (NatProd.new x y) = Equal.refl


// 2.5.1. Exercise:
NatList = (List Nat)

Nonzeros (l : NatList) : NatList
Nonzeros (List.nil Nat) = (List.nil Nat)
Nonzeros (List.cons Nat Nat.zero tail) = Nonzeros tail
Nonzeros (List.cons Nat head tail)     = List.cons Nat head (Nonzeros tail)

MapSix : NatList
MapSix = (List.cons Nat (U60.to_nat 0)
	(List.cons Nat (U60.to_nat 1)
	(List.cons Nat (U60.to_nat 0)
	(List.cons Nat (U60.to_nat 2)
	(List.cons Nat (U60.to_nat 3)
	(List.cons Nat (U60.to_nat 0)
	(List.cons Nat (U60.to_nat 0)((List.nil Nat)))))))))

MapTri : NatList
MapTri = (List.cons Nat (U60.to_nat 1)
	(List.cons Nat (U60.to_nat 2)
	(List.cons Nat (U60.to_nat 3)((List.nil Nat)))))

Test_nonzeros : (Equal (Nonzeros MapSix) MapTri)
Test_nonzeros = Equal.refl

Odd (n: Nat) : Bool
Odd Nat.zero = Bool.false
Odd (Nat.succ Nat.zero) = Bool.true
Odd (Nat.succ (Nat.succ k)) = Odd k

Oddmembers (l : NatList) : NatList
Oddmembers (List.nil Nat) = (List.nil Nat)
Oddmembers ((List.cons Nat head tail)) = if (Odd head) {(List.cons Nat head (Oddmembers tail))} else {(Oddmembers tail)}


MapOne_Tri : NatList
MapOne_Tri = (List.cons Nat (U60.to_nat 1)
			(List.cons Nat (U60.to_nat 3)((List.nil Nat))))

Test_oddmembers : (Equal NatList (Oddmembers MapSix) MapOne_Tri)
Test_oddmembers = Equal.refl

Countoddmembers (l : NatList) : Nat
Countoddmembers (List.nil Nat) = Nat.zero
Countoddmembers (List.cons Nat head tail) = if (Odd head) {(Nat.succ (Countoddmembers tail))} else {(Countoddmembers tail)}

MapFiv : NatList
MapFiv = (List.cons Nat (U60.to_nat 1)
	(List.cons Nat (U60.to_nat 0)
	(List.cons Nat (U60.to_nat 3)
	(List.cons Nat (U60.to_nat 1)
	(List.cons Nat (U60.to_nat 4)
	(List.cons Nat (U60.to_nat 5)((List.nil Nat))))))))

Test_countoddmembers1 : (Equal Nat (Countoddmembers MapFiv) (U60.to_nat 4))
Test_countoddmembers1 = Equal.refl

// 2.5.2. Exercise: 
Alternate (l1: NatList) (l2: NatList) : NatList
Alternate (List.nil Nat) (List.nil Nat) = (List.nil Nat)
Alternate ((List.cons Nat head tail)) (List.nil Nat) = (List.cons Nat head (Alternate tail (List.nil Nat)))
Alternate (List.nil Nat) ((List.cons Nat head tail)) = (List.cons Nat head (Alternate (List.nil Nat) tail))
Alternate (List.cons Nat l1.head l1.tail) (List.cons Nat l2.head l2.tail) = (List.cons Nat l1.head (List.cons Nat l2.head (Alternate l1.tail l2.tail)))

MapSix_ : NatList
MapSix_ = (List.cons Nat (U60.to_nat 1)
	(List.cons Nat (U60.to_nat 4)
	(List.cons Nat (U60.to_nat 2)
	(List.cons Nat (U60.to_nat 5)
	(List.cons Nat (U60.to_nat 3)
	(List.cons Nat (U60.to_nat 6)((List.nil Nat))))))))

MapQua_to_Six  : NatList
MapQua_to_Six = (List.cons Nat (U60.to_nat 4)
		(List.cons Nat (U60.to_nat 5)
		(List.cons Nat (U60.to_nat 6)((List.nil Nat)))))

MapOne_Qua_to_Six : NatList
MapOne_Qua_to_Six = (List.cons Nat (U60.to_nat 1)
		(List.cons Nat (U60.to_nat 4)
		(List.cons Nat (U60.to_nat 5)
		(List.cons Nat (U60.to_nat 6)((List.nil Nat))))))

MapOne_Qua_Duo_Tri : NatList
MapOne_Qua_Duo_Tri = (List.cons Nat (U60.to_nat 1)
											(List.cons Nat (U60.to_nat 4)
											(List.cons Nat (U60.to_nat 2)
											(List.cons Nat (U60.to_nat 3)((List.nil Nat))))))
MapTwe_Thi : NatList
MapTwe_Thi = (List.cons Nat (U60.to_nat 20)
							(List.cons Nat (U60.to_nat 30)((List.nil Nat))))

Test_alternate1 : (Equal NatList (Alternate MapTri MapQua_to_Six) MapSix_)
Test_alternate1 = Equal.refl

Test_alternate2 : (Equal NatList (Alternate (List.cons Nat (U60.to_nat 1)((List.nil Nat))) MapQua_to_Six)  MapOne_Qua_to_Six)
Test_alternate2 = Equal.refl

Test_alternate3 : (Equal NatList (Alternate MapTri (List.cons Nat (U60.to_nat 4)((List.nil Nat))))  MapOne_Qua_Duo_Tri)
Test_alternate3 = Equal.refl

Test_alternate4 : (Equal NatList (Alternate ((List.nil Nat)) MapTwe_Thi)  MapTwe_Thi)
Test_alternate4 = Equal.refl

// 2.6. Bags via Lists.
Bag : Type
Bag = NatList

// 2.6.1. Exercise:
Count (v: Nat) (s: Bag) : Nat
Count v (List.nil ) = Nat.zero
Count v (List.cons Nat head tail) = if (Nat.equal head v) {Nat.succ (Count v tail)} else {Count v tail}

MapOne_to_Tri_One_Qua_One : NatList
MapOne_to_Tri_One_Qua_One = (List.cons Nat (U60.to_nat 1)
														(List.cons Nat (U60.to_nat 2)
														(List.cons Nat (U60.to_nat 3)
														(List.cons Nat (U60.to_nat 1)
														(List.cons Nat (U60.to_nat 4)
														(List.cons Nat (U60.to_nat 1)((List.nil Nat))))))))

Test_count1 : (Equal Nat (Count (U60.to_nat 1) MapOne_to_Tri_One_Qua_One)  (U60.to_nat 3))
Test_count1 = Equal.refl

Test_count2 : (Equal Nat (Count (U60.to_nat 6) MapOne_to_Tri_One_Qua_One)  (U60.to_nat 0))
Test_count2 = Equal.refl


Sum (x: Bag) (y: Bag) : Bag
Sum (List.nil ) (List.nil ) = (List.nil )
Sum (List.nil ) ((List.cons Nat head tail)) = (List.cons Nat head (Sum (List.nil Nat) tail))
Sum ((List.cons Nat head tail)) y = (List.cons Nat head (Sum tail y))

MapOne_Qua_One : NatList
MapOne_Qua_One = (List.cons Nat (U60.to_nat 1)
								(List.cons Nat (U60.to_nat 4)
								(List.cons Nat (U60.to_nat 1)((List.nil Nat)))))

Test_sum1 : (Equal Nat (Count (U60.to_nat 1) (Sum MapTri MapOne_Qua_One)) (U60.to_nat 3))
Test_sum1 = Equal.refl

Add (v: Nat) (s: Bag) : Bag
Add v (List.nil ) =  List.cons Nat v (List.nil Nat)
Add v ((List.cons Nat head tail)) = List.cons Nat v ((List.cons Nat head tail))

Test_add1 : (Equal Nat (Count (U60.to_nat 1) (Add (U60.to_nat 1) MapOne_Qua_One)) (U60.to_nat 3))
Test_add1 = Equal.refl

Test_add2 : (Equal Nat (Count (U60.to_nat 5) (Add (U60.to_nat 1) MapOne_Qua_One)) (U60.to_nat 0))
Test_add2 = Equal.refl

Member (v: Nat) (s: Bag) : Bool
Member v (List.nil ) = Bool.false
Member v ((List.cons Nat head tail)) = if (Nat.equal head v) {Bool.true} else {(Member v tail)}

Test_member1 : (Equal Bool (Member (U60.to_nat 1) MapOne_Qua_One) (Bool.true))
Test_member1 = Equal.refl

Test_member2 : (Equal Bool (Member (U60.to_nat 2) MapOne_Qua_One) (Bool.false))
Test_member2 = Equal.refl

// // 2.6.2. Exercise:

Remove_one (v: Nat) (s: Bag) : Bag
Remove_one v ((List.nil )) = (List.nil )
Remove_one v ((List.cons Nat head tail)) = if (Nat.equal v head) {tail} else {(List.cons Nat head (Remove_one v tail))}

MapTwo_One_Fiv_Qua_One : NatList
MapTwo_One_Fiv_Qua_One = (List.cons Nat (U60.to_nat 2)
													(List.cons Nat (U60.to_nat 1)
													(List.cons Nat (U60.to_nat 5)
													(List.cons Nat (U60.to_nat 4)
													(List.cons Nat (U60.to_nat 1)((List.nil Nat)))))))

Test_remove_one1 : (Equal Nat (Count (U60.to_nat 5) (Remove_one (U60.to_nat 5) MapTwo_One_Fiv_Qua_One)) (U60.to_nat 0))
Test_remove_one1 = Equal.refl

MapTwo_One_Qua_One : NatList
MapTwo_One_Qua_One = (List.cons Nat (U60.to_nat 2)
											(List.cons Nat (U60.to_nat 1)
											(List.cons Nat (U60.to_nat 4)
											(List.cons Nat (U60.to_nat 1)((List.nil Nat))))))

Test_remove_one2 : (Equal Nat (Count (U60.to_nat 5) (Remove_one (U60.to_nat 5) MapTwo_One_Qua_One)) (U60.to_nat 0))
Test_remove_one2 = Equal.refl

MapTwo_One_Fiv_Qua_One_Qua : NatList
MapTwo_One_Fiv_Qua_One_Qua  = (List.cons Nat (U60.to_nat 2)
															(List.cons Nat (U60.to_nat 1)
															(List.cons Nat (U60.to_nat 5)
															(List.cons Nat (U60.to_nat 4)
															(List.cons Nat (U60.to_nat 1)
															(List.cons Nat (U60.to_nat 4)((List.nil Nat))))))))


Test_remove_one3 : (Equal Nat (Count (U60.to_nat 4) (Remove_one (U60.to_nat 5) MapTwo_One_Fiv_Qua_One_Qua)) (U60.to_nat 2))
Test_remove_one3 = Equal.refl

MapTwo_One_Fiv_Qua_Fiv_One_Qua : NatList
MapTwo_One_Fiv_Qua_Fiv_One_Qua  = (List.cons Nat (U60.to_nat 2)
																	(List.cons Nat (U60.to_nat 1)
																	(List.cons Nat (U60.to_nat 5)
																	(List.cons Nat (U60.to_nat 4)
																	(List.cons Nat (U60.to_nat 5)
																	(List.cons Nat (U60.to_nat 1)
																	(List.cons Nat (U60.to_nat 4)((List.nil Nat)))))))))

Test_remove_one4 : (Equal Nat (Count (U60.to_nat 5) (Remove_one (U60.to_nat 5) MapTwo_One_Fiv_Qua_Fiv_One_Qua)) (U60.to_nat 1))
Test_remove_one4 = Equal.refl

Remove_all (v: Nat) (s: Bag) : Bag
Remove_all v ((List.nil Nat)) = (List.nil Nat)
Remove_all v ((List.cons Nat head tail)) = if (Nat.equal v head) {(Remove_all v tail)} else {(List.cons Nat head (Remove_all v tail))}

Test_remove_all1 : (Equal Nat (Count (U60.to_nat 5) (Remove_all (U60.to_nat 5) MapTwo_One_Fiv_Qua_One)) (U60.to_nat 0))
Test_remove_all1 = Equal.refl


Test_remove_all2 : (Equal Nat (Count (U60.to_nat 5) (Remove_all (U60.to_nat 5) MapTwo_One_Qua_One)) (U60.to_nat 0))
Test_remove_all2 = Equal.refl


Test_remove_all3 : (Equal Nat (Count (U60.to_nat 4) (Remove_all (U60.to_nat 5) MapTwo_One_Fiv_Qua_One_Qua)) (U60.to_nat 2))
Test_remove_all3 = Equal.refl

MapTwo_One_Fiv_Qua_Fiv_One_Qua_Fiv_One_Qua : NatList
MapTwo_One_Fiv_Qua_Fiv_One_Qua_Fiv_One_Qua = (List.cons Nat (U60.to_nat 2)
																						(List.cons Nat (U60.to_nat 1)
																						(List.cons Nat (U60.to_nat 5)
																						(List.cons Nat (U60.to_nat 4)
																						(List.cons Nat (U60.to_nat 5)
																						(List.cons Nat (U60.to_nat 1)
																						(List.cons Nat (U60.to_nat 4)
																						(List.cons Nat (U60.to_nat 5)
																						(List.cons Nat (U60.to_nat 1)
																						(List.cons Nat (U60.to_nat 4)((List.nil Nat))))))))))))

Test_remove_all4 : (Equal Nat (Count (U60.to_nat 5) (Remove_all (U60.to_nat 5) MapTwo_One_Fiv_Qua_Fiv_One_Qua_Fiv_One_Qua)) (U60.to_nat 0))
Test_remove_all4 = Equal.refl

Subset (s1: Bag) (s2: Bag) : Bool
Subset (List.cons Nat s1.head s1.tail) (List.nil Nat) = Bool.false
Subset (List.nil ) (List.cons Nat s2.head s2.tail) = Bool.true
Subset (List.nil ) (List.nil ) = Bool.true
Subset (List.cons Nat s1.head s1.tail) s2 = if (Member s1.head s2) {(Subset s1.tail (Remove_one s1.head s2))} else {Bool.false}
		 

MapOne_Two : NatList
MapOne_Two = (List.cons Nat (U60.to_nat 1)
							(List.cons Nat (U60.to_nat 2)((List.nil Nat))))

Test_subset1 : (Equal Bool (Subset MapOne_Two MapTwo_One_Qua_One) Bool.true)
Test_subset1 = Equal.refl

MapOne_Two_Two  : NatList
MapOne_Two_Two = (List.cons Nat (U60.to_nat 1)
								(List.cons Nat (U60.to_nat 2)
								(List.cons Nat (U60.to_nat 2)((List.nil Nat)))))
								
Test_subset2 : (Equal Bool (Subset MapOne_Two_Two MapTwo_One_Qua_One) Bool.false)
Test_subset2 = Equal.refl

// 2.6.3. Exercise: 

List.concat (xs: NatList) (ys: NatList) : NatList 
List.concat (List.nil )            ys = ys
List.concat (List.cons Nat head tail) ys = (List.cons Nat head (List.concat tail ys))



Rev (l: List Nat) : List Nat
Rev (List.nil ) = List.nil 
Rev (List.cons Nat head tail) = List.concat (Rev tail) [head]


// Proof: 


// 3.3.1. Exercise: 
App_nil_r (l: NatList) : (Equal NatList (List.concat l (List.nil Nat)) l)
App_nil_r (List.nil Nat) = Equal.refl
// - Goal: (Equal NatList (List.nil Nat) (List.nil Nat))
App_nil_r (List.cons Nat head tail) = 
																let ind = App_nil_r tail
																let app = Equal.apply (x => List.cons head x) ind
																app
// - int : (Equal (List Nat) (List.concat _ tail (List.nil Nat)) tail)
// - app : (Equal (List Nat) (List.cons Nat head (List.concat _ tail (List.nil Nat))) (List.cons Nat head tail))
// - Goal: (Equal (List Nat) (List.cons _ head (List.concat _ tail (List.nil Nat))) (List.cons Nat head tail))

App_length (l1: NatList) (l2: NatList) : (Equal Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
App_length (List.nil Nat) l2 = Equal.refl
// - Goal: (Equal Nat (List.length _ l2) (List.length _ l2))
App_length (List.cons Nat head tail) l2 = 
																		let ind = App_length tail l2
																		let app = Equal.apply (x => Nat.succ x) ind 
																		app
// - ind : (Equal Nat (List.length _ (List.concat _ tail l2)) (Nat.add (List.length _ tail) (List.length _ l2)))
// - app : (Equal Nat (Nat.succ (List.length _ (List.concat _ tail l2))) (Nat.succ (Nat.add (List.length _ tail) (List.length _ l2))))
// - Goal: (Equal Nat (Nat.succ (List.length _ (List.concat _ tail l2))) (Nat.succ (Nat.add (List.length _ tail) (List.length _ l2))))

Plus_comm (n: Nat) (m: Nat) : (Equal Nat (Nat.add n m) (Nat.add m n))
											  
Rev_length (l: NatList) : (Equal Nat (List.length (Rev l)) (List.length l)) //meu video
Rev_length (List.nil Nat) = Equal.refl
// - Goal: (Equal _ Nat.zero Nat.zero)
Rev_length (List.cons Nat head tail) = // livro 
																let ind = Rev_length tail 
																let aux1 = App_length (Rev tail) [head]
																let aux2 = Plus_comm (List.length (Rev tail)) (Nat.succ Nat.zero)
																let chn = Equal.chain aux1 aux2
																let rrt = Equal.rewrite ind (x => (Equal _ (List.length _ (List.concat (Rev tail) (List.cons _ head (List.nil _)))) (Nat.succ (x)))) chn
																rrt														
// - ind : (Equal _ (List.length _ (Rev tail)) (List.length _ tail))
// - aux1: (Equal Nat (List.length _ (List.concat (Rev tail) (List.cons Nat head (List.nil Nat)))) (Nat.add (List.length _ (Rev tail)) (Nat.succ Nat.zero)))
// - aux2: (Equal Nat (Nat.add (List.length Nat (Rev tail)) (Nat.succ Nat.zero)) (Nat.succ (List.length Nat (Rev tail))))
// - rrt : (Equal Nat (List.length Nat (List.concat (Rev tail) (List.cons Nat head (List.nil Nat)))) (Nat.succ (List.length _ tail)))
// - Goal: (Equal _ (List.length _ (List.concat (Rev tail) (List.cons _ head (List.nil _)))) (Nat.succ (List.length _ tail)))

App_assoc (l1: NatList) (l2: NatList) (l3: NatList) : (Equal (List Nat) (List.concat (List.concat l1 l2) l3) (List.concat l1 (List.concat l2 l3))) 
App_assoc List.nil l2 l3  = Equal.refl
// - Goal: (Equal (List Nat) (List.concat l2 l3) (List.concat l2 l3))
App_assoc (List.cons Nat head tail) l2 l3  = 
																			let ind = App_assoc tail l2 l3
																			let app = Equal.apply (x => List.cons _ head x) ind
																			app
// - ind : (Equal _ (List.concat _ (List.concat _ tail l2) l3) (List.concat _ tail (List.concat _ l2 l3)))
// - app : (Equal (List Nat) (List.cons Nat head (List.concat _ (List.concat _ tail l2) l3)) (List.cons Nat head (List.concat _ tail (List.concat _ l2 l3))))
// - Goal: (Equal (List Nat) (List.cons _ head (List.concat _ (List.concat _ tail l2) l3)) (List.cons _ head (List.concat _ tail (List.concat _ l2 l3))))

Rev_app_distr (l1: NatList) (l2: NatList) : (Equal NatList (Rev (List.concat l1 l2)) (List.concat (Rev l2) (Rev l1)))
Rev_app_distr (List.nil Nat) l2 = 
														let aux = App_nil_r (Rev l2)
														let mir = Equal.mirror aux
														mir
// - aux : (Equal (List Nat) (List.concat _ l2 (List.nil Nat)) l2)
// - aux : (Equal (List Nat) (List.concat _ (Rev l2) (List.nil Nat)) (Rev l2))
// - mir : (Equal (List Nat) (Rev l2) (List.concat _ (Rev l2) (List.nil Nat)))
// - Goal: (Equal (List Nat) (Rev l2) (List.concat _ (Rev l2) (List.nil Nat)))
Rev_app_distr (List.cons Nat head tail) l2 = 
																						let ind = Rev_app_distr tail l2
																						let app1 = Equal.apply (x => List.concat x [head]) ind
																						let aux1 = App_assoc (Rev l2) (Rev tail) [head] 
																						let chn = Equal.chain app1 aux1 
																						chn
// - ind : (Equal (List Nat) (Rev (List.concat _ tail l2)) (List.concat _ (Rev l2) (Rev tail)))
// - app1: (Equal (List Nat) (List.concat (Rev (List.concat tail l2)) (List.cons Nat head (List.nil Nat))) (List.concat (List.concat (Rev l2) (Rev tail)) (List.cons Nat head (List.nil Nat)))) 
// - aux1: (Equal (List Nat) (List.concat (List.concat (Rev l2) (Rev tail)) (List.cons Nat head (List.nil Nat))) (List.concat (Rev l2) (List.concat (Rev tail) (List.cons Nat head (List.nil Nat)))))
// - chn : (Equal (List Nat) (List.concat (Rev (List.concat tail l2)) (List.cons Nat head (List.nil Nat))) (List.concat (Rev l2) (List.concat (Rev tail) (List.cons Nat head (List.nil Nat)))))
// - Goal: (Equal (List Nat) (List.concat (Rev (List.concat tail l2)) (List.cons _ head (List.nil _))) (List.concat (Rev l2) (List.concat (Rev tail) (List.cons _ head (List.nil _)))

Rev_involutive (l: NatList) : (Equal NatList (Rev (Rev l)) l)
Rev_involutive (List.nil Nat) = Equal.refl
Rev_involutive (List.cons Nat head tail) = 
																		let ind = Rev_involutive tail 
																		let aux = Rev_app_distr (Rev tail) [head]
																		let rrt = Equal.rewrite ind (x => (Equal (List Nat) (Rev (List.concat (Rev tail) (List.cons Nat head (List.nil Nat)))) (List.concat (List.cons _ head (List.nil _)) (x)))) aux
												  					rrt
// - ind : (Equal (List Nat) (Rev (Rev tail)) tail)
// - aux : (Equal (List Nat) (Rev (List.concat (Rev tail) (List.cons Nat head (List.nil Nat)))) (List.concat (List.cons _ head (List.nil _)) (Rev (Rev tail))))
// - rrt : (Equal (List Nat) (Rev (List.concat (Rev tail) (List.cons Nat head (List.nil Nat)))) (List.cons Nat head tail))
// - Goal: (Equal (List Nat) (Rev (List.concat (Rev tail) (List.cons _ head (List.nil _)))) (List.cons Nat head tail))

App_assoc4 (l1: NatList) (l2: NatList) (l3: NatList) (l4: NatList) : (Equal NatList (List.concat l1 (List.concat l2 (List.concat l3 l4))) (List.concat (List.concat (List.concat l1 l2) l3) l4))
App_assoc4 (List.nil Nat) l2 l3 l4 = 
															let ind = App_assoc l2 l3 l4
															let mir = Equal.mirror ind
															mir
// - ind : (Equal (List Nat) (List.concat _ (List.concat _ l2 l3) l4) (List.concat _ l2 (List.concat _ l3 l4)))	
// - mir : (Equal (List Nat) (List.concat _ l2 (List.concat _ l3 l4)) (List.concat _ (List.concat _ l2 l3) l4))														
// - Goal: (Equal (List Nat) (List.concat _ l2 (List.concat _ l3 l4)) (List.concat _ (List.concat _ l2 l3) l4))
App_assoc4 (List.cons Nat head tail) l2 l3 l4 = 
																					let ind = App_assoc4 tail l2 l3 l4
																					let app = Equal.apply (x => List.cons _ head x) ind
																					app
// - ind : (Equal (List Nat) (List.concat _ tail (List.concat _ l2 (List.concat _ l3 l4))) (List.concat _ (List.concat _ (List.concat _ tail l2) l3) l4))
// - app : (Equal (List Nat) (List.cons Nat head (List.concat _ tail (List.concat _ l2 (List.concat _ l3 l4)))) (List.cons Nat head (List.concat _ (List.concat _ (List.concat _ tail l2) l3) l4)))
// - Goal: (Equal (List Nat) (List.cons _ head (List.concat _ tail (List.concat _ l2 (List.concat _ l3 l4)))) (List.cons _ head (List.concat _ (List.concat _ (List.concat _ tail l2) l3) l4))

Nonzeros_app (l1: NatList) (l2: NatList) : (Equal NatList (Nonzeros (List.concat l1 l2)) (List.concat (Nonzeros l1) (Nonzeros l2)))
Nonzeros_app (List.nil Nat) l2 = Equal.refl
// - Goal: (Equal (List Nat) (Nonzeros l2) (Nonzeros l2))

// 3.3.2. Exercise:
Beq_NatList (l1: NatList) (l2: NatList) : Bool
Beq_NatList (List.nil ) (List.nil ) = Bool.true
Beq_NatList (List.cons l1.head l1.tail) (List.cons l2.head l2.tail) = 
(Bool.and (Nat.equal l1.head l2.head) (Beq_NatList l1.tail l2.tail))
Beq_NatList l1 l2 = Bool.false

Test_beq_NatList1 : (Equal Bool (Beq_NatList (List.nil Nat) (List.nil Nat)) Bool.true)
Test_beq_NatList1 = Equal.refl
// - Goal: (Equal Bool Bool.true Bool.true)
Test_beq_NatList2 : (Equal Bool (Beq_NatList [(U60.to_nat 1),(U60.to_nat 2),(U60.to_nat 3)] [(U60.to_nat 1),(U60.to_nat 2),(U60.to_nat 3)]) Bool.true)
Test_beq_NatList2 = Equal.refl
// - Goal: (Equal Bool Bool.false Bool.false)
Test_beq_NatList3 : (Equal Bool (Beq_NatList ([(U60.to_nat 1),(U60.to_nat 2),(U60.to_nat 3)]) ([(U60.to_nat 1),(U60.to_nat 2),(U60.to_nat 4)])) Bool.false)
Test_beq_NatList3 = Equal.refl
// - Goal: (Equal Bool Bool.true Bool.true)
Beq_NatList_refl (l: NatList) : (Equal Bool Bool.true (Beq_NatList l l))
Beq_NatList_refl (List.nil Nat) = Equal.refl
// - Goal: (Equal Bool Bool.true Bool.true)
Beq_NatList_refl (List.cons Nat head tail) = 
																			let ind = Beq_NatList_refl tail
																			let prf = Nat.equal.refl head // 
																			let app = Equal.apply (x => (Bool.and (Nat.equal head head) x)) ind
																			let rrt = Equal.rewrite prf (x =>  (Equal Bool (Bool.and (x) Bool.true) (Bool.and (Nat.equal head head) (Beq_NatList tail tail)))) app
																			rrt
// - ind : (Equal Bool Bool.true (Beq_NatList tail tail))
// - prf : (Equal _ (Nat.equal head head) Bool.true)
// - app : (Equal Bool (Bool.and (Nat.equal head head) Bool.true) (Bool.and (Nat.equal head head) (Beq_NatList tail tail)))
// - rrt : (Equal Bool Bool.true (Bool.and (Nat.equal head head) (Beq_NatList tail tail)))
// - Goal: (Equal Bool Bool.true (Bool.and (Nat.equal head head) (Beq_NatList tail tail)))

// 3.4.1. Exercise:
Lte (n: Nat) (m: Nat) : Bool
Lte Nat.zero m = Bool.true
Lte n Nat.zero = Bool.false
Lte (Nat.succ k) (Nat.succ j) = Lte k j

Lte_z_n (n: Nat) : Equal Bool (Lte Nat.zero n) Bool.true
Lte_z_n Nat.zero = Equal.refl
// - Goal: (Equal Bool Bool.true Bool.true)
Lte_z_n (Nat.succ n.pred) = Equal.refl
// - Goal: (Equal Bool Bool.true Bool.true)

Count_member_nonzero (s: Bag) : (Equal Bool (Lte (Nat.succ Nat.zero) (Count (Nat.succ Nat.zero) (List.cons Nat (Nat.succ Nat.zero) s))) Bool.true)
Count_member_nonzero s = 
									let aux = Lte_z_n (Count (Nat.succ Nat.zero) s)
									aux
// - Goal: (Equal Bool (Lte Nat.zero (Count (Nat.succ Nat.zero) s)) Bool.true)
// - Goal: (Equal Bool (Lte Nat.zero (Count (Nat.succ Nat.zero) s)) Bool.true)

Ble_n_Sn (n: Nat) : Equal Bool (Lte n (Nat.succ n)) Bool.true
Ble_n_Sn Nat.zero = Equal.refl
// - Goal: (Equal Bool Bool.true Bool.true)
Ble_n_Sn (Nat.succ n.pred) = 
											let ind = Ble_n_Sn n.pred
											ind
// - ind : (Equal Bool (Lte n.pred (Nat.succ n.pred)) Bool.true)
// - Goal: (Equal Bool (Lte n.pred (Nat.succ n.pred)) Bool.true)

Remove_decreases_count (s: Bag) : (Equal Bool (Lte (Count Nat.zero (Remove_one Nat.zero s)) (Count Nat.zero s)) Bool.true) 

// 3.4.2. Exercise:

// 3.4.3. Exercise: 
Rev_injective (l1: NatList) (l2: NatList) (e: Equal NatList (Rev l1) (Rev l2)) : (Equal NatList l1 l2)
Rev_injective l1 l2 prf = 
                    let aux1 = Rev_involutive l1
                    let aux2 = Rev_involutive l2
										let app = Equal.apply (x => Rev x) prf
										let chn1 = Equal.chain app aux2
										let mir1 = Equal.mirror chn1
										let chn2 = Equal.chain mir1 aux1
										let mir2 = Equal.mirror chn2 
										mir2
// - prf : (Equal (List Nat) (Rev l1) (Rev l2))
// - aux1: (Equal (List Nat) (Rev (Rev l1)) l1)
// - aux2: (Equal (List Nat) (Rev (Rev l2)) l2)
// - app : (Equal (List Nat) (Rev (Rev l1)) (Rev (Rev l2)))
// - chn1: (Equal (List Nat) (Rev (Rev l1)) l2)
// - mir1: (Equal (List Nat) l2 (Rev (Rev l1)))
// - chn2: (Equal (List Nat) l2 l1)
// - mir2: (Equal (List Nat) l1 l2)
// - Goal: (Equal (List Nat) l1 l2)

// 4.0.1. Exercise:ase.
NatOption : Type 
NatOption = (Maybe Nat)

Option_elim (d: Nat) (o: NatOption) : Nat
Option_elim d (Maybe.some k)   = k
Option_elim d (Maybe.none Nat) = d

Hd_error <x> (l: List Nat) : NatOption
Hd_error x (List.nil ) = (Maybe.none )
Hd_error x (List.cons  head tail) = (Maybe.some  head)

Test_hd_error1 : (Equal NatOption (Hd_error []) (Maybe.none Nat)) 
Test_hd_error1 = Equal.refl

Test_hd_error2 : (Equal NatOption (Hd_error [(U60.to_nat 1)]) (Maybe.some (U60.to_nat 1))) 
Test_hd_error2 = Equal.refl

Test_hd_error3 : (Equal NatOption (Hd_error [(U60.to_nat 5),(U60.to_nat 6)]) (Maybe.some (U60.to_nat 5))) 
Test_hd_error3 = Equal.refl

// 4.0.2. Exercise: 
Hd_list (v: Nat) (l: List Nat): Nat
Hd_list  v (List.nil ) = v
Hd_list  v (List.cons head tail) = head

Option_elim_hd (l: NatList) (default: Nat) : (Equal (Hd_list default l) (Option_elim default (Hd_error l)))


Id : Type 
MkId (key: Nat) : Id

Beq_id (x1: Id) (x2: Id) : Bool
Beq_id (MkId n1) (MkId n2) = Nat.equal n1 n2 

// 5.0.1. Exercise: 
Beq_id_refl (x: Id) : (Equal Bool Bool.true (Beq_id x x))
Beq_id_refl (MkId Nat.zero) = Equal.refl
// - Goal: (Equal Bool Bool.true Bool.true)
Beq_id_refl (MkId (Nat.succ n.pred)) = ?
// - Goal: (Equal Bool Bool.true (Nat.equal n.pred n.pred))
PartialMap : Type 
PartialMap.empty : PartialMap
PartialMap.record  (key: Id) (val: Nat) (map: PartialMap) : PartialMap

Update (d: PartialMap) (x: Id) (value: Nat) : PartialMap
Update d x value = PartialMap.record x value d

Find (x: Id) (d: PartialMap) : NatOption
Find x PartialMap.empty = (Maybe.none Nat)
Find x (PartialMap.record key val map) = if (Beq_id x key) {(Maybe.some val)} else {Find x map}

// 5.0.2. Exercise:
Update_eq (d: PartialMap) (x: Id) (v: Nat) : (Equal NatOption (Find x (Update d x v)) (Maybe.some v))

// 5.0.3. Exercise: 
Update_neq (d: PartialMap) (x: Id) (y: Id) (o: Nat) (e: Equal Bool (Beq_id x y) Bool.false) : (Equal (Find x (Update d y o)) (Find x d))

// 5.0.4. Exercise: